{"version":3,"sources":["app.js","controllers/clientesController.js","controllers/contactosController.js","controllers/loginController.js","controllers/mainController.js","controllers/navController.js","directives/bootstrapTooltip.js","directives/hm-left-nav.js","directives/hm-top-nav.js","services/clientesFactory.js","services/contactosFactory.js","services/propiedadesCompartidasService.js","services/userFactory.js","services/usuariosFactory.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtrnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["angular.module(\"biosegura\", [\"ngRoute\", \"ngCookies\", \"ngResource\", \"ngTable\", \"ngAnimate\", \"ui-notification\"])\n        .config(function ($routeProvider) {\n            $routeProvider\n                    .when(\"/login\", {\n                        controller: \"loginCtrl\",\n                        templateUrl: \"ng-templates/login/loginForm.html\",\n                        authenticated: false\n                    })\n                    .when(\"/mi-panel\", {\n                        templateUrl: \"ng-templates/main/index.html\",\n                        authenticated: true\n                    })\n                    .when(\"/mi-perfil\", {\n                        controller: \"loginCtrl\",\n                        templateUrl: \"ng-templates/usuario/gestion_usuario.html\",\n                        authenticated: true\n                    })\n                    .when(\"/usuarios\", {\n                        controller: \"usuariosCtrl\",\n                        templateUrl: \"ng-templates/crud_general/index.html\",\n                        authenticated: true\n                    })\n                    .when(\"/\", {\n                        controller: \"contactosCtrl\",\n                        templateUrl: \"ng-templates/crud_general/index.html\",\n                        authenticated: false\n                    })\n                    .when(\"/contratos\", {\n                        controller: \"contratosCtrl\",\n                        templateUrl: \"ng-templates/crud_general/index.html\",\n                        authenticated: false\n                    })\n                    .when(\"/ramos\", {\n                        controller: \"ramosCtrl\",\n                        templateUrl: \"ng-templates/crud_general/index.html\",\n                        authenticated: true\n                    })\n                    .when(\"/importaciones\", {\n                        controller: \"importacionesCtrl\",\n                        templateUrl: \"ng-templates/crud_general/index.html\",\n                        authenticated: true\n                    })\n                    .when(\"/comisiones\", {\n                        controller: \"importacionesCtrl\",\n                        templateUrl: \"ng-templates/importacion/index.html\",\n                        authenticated: true\n                    })\n                    // ERRORES\n                    .otherwise({\n                        templateUrl: \"ng-templates/errors/404.html\",\n                        authenticated: false\n                    });\n        })\n\n        .run(['$rootScope', \"$location\", \"User\", function ($rootScope, $location, User) {\n                $rootScope.usuario = User.getUserObject() || {};\n\n                $rootScope.$on(\"$routeChangeStart\", function (event, next, current) {\n                    // si intento ir a una pagina que requiere autenticacion y no lo estoy > me manda a '/'\n                    if (next.$$route.authenticated) {\n                        if (!User.getAuthStatus()) {\n                            $location.path('/');\n                        }\n                    }\n                    // si intento ir a '/' y ya estoy autenticado > me manda a '/mi-panel'\n                    if (next.$$route.originalPath === '/') {\n                        if (User.getAuthStatus()) {\n//                            $location.path('/mi-panel');\n                            $location.path('/contactos');\n                        }\n                    }\n                });\n            }])\n\n        .config(function (NotificationProvider) {\n            NotificationProvider.setOptions({\n                delay: 15000,\n                startTop: 20,\n                startRight: 10,\n                verticalSpacing: 20,\n                horizontalSpacing: 20,\n                positionX: 'right',\n                positionY: 'bottom',\n                templateUrl: \"ng-templates/notificaciones/notification.html\"\n            });\n        });               \n","angular.module('biosegura')\n        .controller('clientesCtrl', ['$scope', '$resource', 'Clientes', 'NgTableParams', 'Notification', function ($scope, $resource, Clientes, NgTableParams, Notification) {\n                Notification.clearAll();\n\n                // textos que apareceran en las plantillas\n                $scope.textos = {\n                    tabla: 'Clientes',\n                    elemento: 'Cliente'\n                };\n                // plantillas que usaremos en distintos sitios\n                $scope.templates = {\n                    modales: {\n                        add: 'ng-templates/crud_general/modales/add.html',\n                        edit: 'ng-templates/crud_general/modales/edit.html',\n                        del: 'ng-templates/crud_general/modales/delete.html'\n                    }\n                };\n\n                // formularios que vamos a necesitar\n                $scope.addingForm = {};\n                $scope.editForm = {};\n                $scope.delForm = {};\n\n                // columnas/campos de la BBDD y su configuracion en el Fontend\n                $scope.cols = [\n                    // si queremos que el campo sea de tipo numérico añadimos tipo: 'number' pero si ademas queremos que pueda ser decimal o que vaya \n                    // step a step tenemos que añadir la propiedad STEP, si no lo hacemos se mostrará como un step normal de 1 en 1\n                    // mientras que si lo añadimos se puede mostrar un step que avance de 0.5 en 0.5, por ejemplo\n                    {field: \"NOMBRE\", title: \"Nombre\", filter: {nombre: 'text'}, show: true, sortable: \"nombre\", tipo: 'text', required: true},\n                    {title: \"Acciones\", show: true, botones: true}\n                ];\n                \n                \n                $scope.colsEdit = [\n                    {field: \"codigo_agropelayo\", title: \"#AgroPelayo\", filter: {codigo_agropelayo: 'text'}, show: true, sortable: \"codigo_agropelayo\", tipo: 'text', required: true},\n                    {field: \"codigo_tib\", title: \"#Tib\", filter: {codigo_tib: 'text'}, show: true, sortable: \"codigo_tib\", tipo: 'text', required: true},\n                    {field: \"codigo_reale\", title: \"#Reale\", filter: {codigo_reale: 'text'}, show: true, sortable: \"codigo_reale\", tipo: 'text', required: true},\n                    {field: \"tipo\", title: \"Tipo\", filter: {Tipo: 'number'}, show: false, sortable: \"tipo\", tipo: 'text', required: true},\n                    {field: \"nombre\", title: \"Nombre\", filter: {nombre: 'text'}, show: true, sortable: \"nombre\", tipo: 'text', required: true},\n                    {field: \"irpf\", title: \"IRPF\", filter: {irpf: 'text'}, show: true, sortable: \"irpf\", tipo: 'text', required: true},\n//                    {field: \"irpf\", title: \"IRPF\", filter: {irpf: 'text'}, show: true, sortable: \"irpf\", tipo: 'number', step: '0.10', required: true},\n                    {field: \"cif_nif\", title: \"CIF/NIF\", filter: {cif_nif: 'text'}, show: true, sortable: \"cif_nif\", tipo: 'text', required: true},\n                    {field: \"cuenta_banco\", title: \"IBAN\", filter: {cuenta_banco: 'text'}, show: true, sortable: \"cuenta_banco\", tipo: 'text', required: true},\n                    {field: \"direccion\", title: \"Dirección\", filter: {direccion: 'text'}, show: true, sortable: \"direccion\", tipo: 'text', required: true},\n                    {field: \"localidad\", title: \"Localidad\", filter: {localidad: 'text'}, show: true, sortable: \"localidad\", tipo: 'text', required: true},\n                    {field: \"cp\", title: \"C.P\", filter: {cp: 'text'}, show: true, sortable: \"cp\", tipo: 'text', required: true},\n                    {field: \"provincia\", title: \"Provincia\", filter: {provincia: 'text'}, show: true, sortable: \"provincia\", tipo: 'text', required: false},\n                    {title: \"Acciones\", show: true, botones: true}\n                ];\n\n                // configuracion de NG-TABLE\n                $scope.tableParams = new NgTableParams({\n                    page: 1,\n                    count: 5\n                }, {\n                    counts: [5, 10, 20, 50, 100],\n                    paginationMaxBlocks: 6,\n                    getData: function (params) {\n                        return Clientes.getFiltered(params.parameters()).$promise.then(function (respuesta) {\n                            params.total(respuesta.total);\n                            return respuesta.data;\n                        });\n                    }\n                });\n\n\n                /**************************************************************\n                 /**************************************************************\n                 /********************   FUNCIONES   ***************************\n                 /**************************************************************\n                 /**************************************************************\n                 \n                 \n                 /*\n                 * AÑADIR AGENTES\n                 */\n                $scope.add_Item = function () {\n                    Notification.clearAll();\n                    \n                    Clientes.create($scope.addingForm).$promise\n                            .then(function (result) {\n                                // añadimos visualmente el nuevo elemento añadido\n                                $scope.tableParams.data.unshift(result);\n                                // eliminamos visualmente el ultimo elemento de la lista\n                                $scope.tableParams.data.pop();\n                                // limpiamos el formulario de creacion de usuarios\n                                $scope.addingForm = {};\n                                // ocultamos el modal\n                                $(\".modal\").modal(\"hide\");\n                                Notification.success({message: $scope.textos.elemento + ' añadido correctamente'});\n                            })\n                            .catch(function (error) {\n                                $.each(error.data, function(index, msg) {\n                                    Notification.error({message: msg});\n                                });\n                            });\n                };\n\n                // reseteamos los datos del formulario de Crear Cliente\n                $scope.clean_addF = function () {\n                    $scope.addingForm = {};\n                };\n\n                /*\n                 * ELIMINAR AGENTES\n                 */\n                $scope.eliminar = function (agente) {\n                    $scope.delForm = agente;\n                };\n\n                $scope.del_Item = function () {\n                    Notification.clearAll();\n                    \n                    Clientes.remove($scope.delForm.id).$promise\n                            .then(function (result) {\n                                $scope.tableParams.reload();\n                                $(\".modal\").modal(\"hide\");\n                                Notification.success({message: $scope.textos.elemento + ' eliminado correctamente'});\n                            })\n                            .catch(function (error) {\n                                Notification.error({message: error.data});\n                            });\n                };\n\n                // funcion para mostrar el dato en el modal de eliminación (solo mostramos los datos que aparecen en el formulario)\n                $scope.delFormShow = function (campo) {\n                    for (var i in $scope.cols) {\n                        if (campo === $scope.cols[i].field)\n                            return true;\n                    }\n                    return false;\n                };\n\n\n                $scope.editar = function (item) {\n                    Clientes.edit(item).$promise\n                            .then(function (result) {\n                                $scope.editForm = result;\n                            })\n                            .catch(function (error) {\n                                error.data.forEach(function(msg, index) {\n                                    Notification.error({message: msg});\n                                });\n                            });\n                };\n                \n\n                $scope.edit_Item = function () {\n                    Notification.clearAll();\n                    \n                    Clientes.update($scope.editForm).$promise\n                            .then(function (result) {\n                                $scope.tableParams.reload();\n                                $scope.nElementos = ['mensaje1','mensaje2'];\n                                $(\".modal\").modal(\"hide\");\n                                Notification.success({message: $scope.textos.elemento + ' modificado correctamente'});\n                            })\n                            .catch(function (error) {\n                                error.data.forEach(function(msg, index) {\n                                    Notification.error({message: msg});\n                                });\n                            });\n                };\n            }]);\n\n","angular.module('biosegura')\n        .controller('contactosCtrl', ['$scope', '$resource', 'Contactos', 'NgTableParams', 'Notification', function ($scope, $resource, Contactos, NgTableParams, Notification) {\n                Notification.clearAll();\n\n                // textos que apareceran en las plantillas\n                $scope.textos = {\n                    tabla: 'Contactos',\n                    elemento: 'Contacto'\n                };\n                // plantillas que usaremos en distintos sitios\n                $scope.templates = {\n                    modales: {\n                        add: 'ng-templates/contactos/add.html',\n                        edit: 'ng-templates/contactos/edit.html',\n                        del: 'ng-templates/contactos/delete.html'\n                    }\n                };\n\n                // formularios que vamos a necesitar\n                $scope.addingForm = {};\n                $scope.editForm = {};\n                $scope.delForm = {};\n\n                // columnas/campos de la BBDD y su configuracion en el Fontend\n                $scope.cols = [\n                    // si queremos que el campo sea de tipo numérico añadimos tipo: 'number' pero si ademas queremos que pueda ser decimal o que vaya\n                    // step a step tenemos que añadir la propiedad STEP, si no lo hacemos se mostrará como un step normal de 1 en 1\n                    // mientras que si lo añadimos se puede mostrar un step que avance de 0.5 en 0.5, por ejemplo\n                    {field: \"CODIGO\", title: \"Código\", filter: {CODIGO: 'text'}, show: true, sortable: \"CODIGO\", tipo: 'text', required: true},\n                    {field: \"NOMBRE\", title: \"Nombre\", filter: {NOMBRE: 'text'}, show: true, sortable: \"NOMBRE\", tipo: 'text', required: true},\n                    {field: \"CIF\", title: \"Cif/nif\", filter: {CIF: 'text'}, show: true, sortable: \"CIF\", tipo: 'text', required: true},\n                    {field: \"DIRECCION\", title: \"Dirección\", filter: {DIRECCION: 'text'}, show: true, sortable: \"DIRECCION\", tipo: 'text', required: true},\n                    {title: \"Acciones\", show: true, botones: true}\n                ];\n\n\n                // configuracion de NG-TABLE\n                $scope.tableParams = new NgTableParams({\n                    page: 1,\n                    count: 5\n                }, {\n                    counts: [5, 10, 20, 50, 100],\n                    paginationMaxBlocks: 6,\n                    getData: function (params) {\n                        return Contactos.getFiltered(params.parameters()).$promise.then(function (respuesta) {\n                            params.total(respuesta.total);\n                            return respuesta.data;\n                        });\n                    }\n                });\n\n\n                /**************************************************************\n                 /**************************************************************\n                 /********************   FUNCIONES   ***************************\n                 /**************************************************************\n                 /**************************************************************\n\n\n                 /*\n                 * AÑADIR AGENTES\n                 */\n                $scope.add_Item = function (form) {\n\t\t\t\t\tconsole.log('Creando');\n                    Notification.clearAll();\n\n                    Contactos.create(form).$promise\n                            .then(function (result) {\n                                // añadimos visualmente el nuevo elemento añadido\n                                $scope.tableParams.data.unshift(result);\n                                // eliminamos visualmente el ultimo elemento de la lista\n                                $scope.tableParams.data.pop();\n                                // limpiamos el formulario de creacion de usuarios\n                                $scope.addingForm = {};\n                                // ocultamos el modal\n                                $(\".modal\").modal(\"hide\");\n                                Notification.success({message: $scope.textos.elemento + ' añadido correctamente'});\n                            })\n                            .catch(function (error) {\n                                $.each(error.data, function(index, msg) {\n                                    Notification.error({message: msg});\n                                });\n                            });\n                };\n\n                // reseteamos los datos del formulario de Crear Contacto\n                $scope.clean_addF = function () {\n                    $scope.addingForm = {};\n                };\n\n                $scope.nada = function () {\n                    console.log(2);\n                };\n\n\n                /*\n                 * ELIMINAR AGENTES\n                 */\n                $scope.eliminar = function (contacto) {\n                    $scope.delForm = contacto;\n                };\n\n                $scope.del_Item = function () {\n                    Notification.clearAll();\n\n                    Contactos.remove($scope.delForm.id).$promise\n                            .then(function (result) {\n                                $scope.tableParams.reload();\n                                $(\".modal\").modal(\"hide\");\n                                Notification.success({message: $scope.textos.elemento + ' eliminado correctamente'});\n                            })\n                            .catch(function (error) {\n                                Notification.error({message: error.data});\n                            });\n                };\n\n                // funcion para mostrar el dato en el modal de eliminación (solo mostramos los datos que aparecen en el formulario)\n                $scope.delFormShow = function (campo) {\n                    for (var i in $scope.cols) {\n                        if (campo === $scope.cols[i].field)\n                            return true;\n                    }\n                    return false;\n                };\n\n\n                $scope.editar = function (item) {\n                    Contactos.edit(item).$promise\n                            .then(function (result) {\n                                $scope.editForm = result;\n                            })\n                            .catch(function (error) {\n                                error.data.forEach(function(msg, index) {\n                                    Notification.error({message: msg});\n                                });\n                            });\n                };\n\n\n                $scope.edit_Item = function () {\n                    Notification.clearAll();\n\n                    Contactos.update($scope.editForm).$promise\n                            .then(function (result) {\n                                $scope.tableParams.reload();\n                                $scope.nElementos = ['mensaje1','mensaje2'];\n                                $(\".modal\").modal(\"hide\");\n                                Notification.success({message: $scope.textos.elemento + ' modificado correctamente'});\n                            })\n                            .catch(function (error) {\n                                error.data.forEach(function(msg, index) {\n                                    Notification.error({message: msg});\n                                });\n                            });\n                };\n            }]);\n\n","angular.module('biosegura')\n        .controller('loginCtrl', ['$rootScope', '$scope', '$location', '$q', 'User', 'Notification', function ($rootScope, $scope, $location, $q, User, Notification) {\n                Notification.clearAll();\n        \n                // FUNCIONALIDAD PARA LOGARSE EN LA APP\n                var inicioSesion = $q.defer();\n\n                inicioSesion.promise.then(function (usuario) {\n                    $rootScope.usuario = usuario;\n                    $location.path('/mi-panel');\n                });\n\n\n                $scope.login_mensaje = null;\n\n                $scope.logarse = function () {\n                    var data = {email: $scope.login.email, password: $scope.login.clave};\n\n                    var usr = User.doLogin(data)\n                            .then(function (usr) {\n                                inicioSesion.resolve(usr.data);\n                            }).catch(function (error) {\n                        $scope.login_mensaje = error.data;\n                    });\n                };\n                \n                \n                // FUNCIONALIDADES ADICIONALES PARA CONTROL DEL USUARIO\n//                $scope.msjError = function(){\n//                    Notification.error({message: 'Mensaje de error', delay: 30000, title: 'Error' });\n//                };\n//                $scope.msjWarning = function(){};\n//                $scope.msjSuccess = function(){};\n            }]);\n\n","angular.module('biosegura')\n        .controller('mainCtrl', ['$scope', function ($scope) {\n                $scope.AppTitle = \"Biosegura\";\n                $scope.volverAtras = function () {\n                    window.history.back();\n                };\n            }]); \n","angular.module('biosegura')\n        .controller('navCtrl', ['$rootScope', '$scope', '$location', 'User', function ($rootScope, $scope, $location, User) {\n                // seleccionar el enlace que está activo para cambiar su visualizacion\n                var url = $location.path();\n                $scope.linkActivo = url.slice(1,url.length);\n                $scope.activarLink = function(enlace){\n                    $scope.linkActivo = enlace;\n                };\n\n                $scope.registrado = function () {\n                    return User.getAuthStatus();\n                };\n\n                $scope.menuAdmin = function () {\n                    return User.isAdmin();\n                };\n                $scope.menuConta = function () {\n                    return User.isConta();\n                };\n                $scope.menuCoord = function () {\n                    return User.isCoord();\n                };\n\n                $scope.mostrarGraficas = function () {\n                    return User.isAdmin() || User.isCoord();\n                };\n\n                $scope.logout = function () {\n                    $rootScope.usuario = null;\n                    User.doUserLogout();\n                };\n                \n            }]); \n","//@holadoc Angular/tooltip  Para usar tooltip a cada elemento html hay que añadirle los atributos '<a bootstrap-tooltip title=\"Este es el tooltip\"></a>' y añadir la directiva bootstrapTooltip\n// registers native Twitter Bootstrap tooltips\nangular.module('biosegura').directive('bootstrapTooltip', function () {\n    return function (scope, element, attrs) {\n        attrs.$observe('title', function (title) {\n            // Destroy any existing tooltips (otherwise new ones won't get initialized)\n            element.tooltip('destroy');\n            // Only initialize the tooltip if there's text (prevents empty tooltips)\n            if (jQuery.trim(title))\n                element.tooltip();\n        });\n        element.on('$destroy', function () {\n            element.tooltip('destroy');\n            delete attrs.$$observers['title'];\n        });\n    };\n});\n","angular.module(\"biosegura\")\n    .directive(\"hmLeftNav\", function() {\n        return {\n            restrict: \"E\",\n            controller: \"navCtrl\",\n            templateUrl: \"ng-templates/nav/nav-left.html\"\n        };\n    });\n","angular.module(\"biosegura\")\n    .directive(\"hmTopNav\", function() {\n      return {\n        restrict: \"E\",\n        templateUrl :\"ng-templates/nav/nav-top.html\"\n      };\n    });\n","angular.module('biosegura')\n        .factory('Clientes', ['$resource', function ($resource) {\n                return {\n                    getAll: function (data) {\n                        return $resource('/api/cliente/:data', data).query();\n                    },\n                    getFiltered: function (filters) {\n                        //@holadoc Angular/ngResource  $resource(\"../rest/api\"}).get(); return an object.  $resource(\"../rest/api\").query(); return an array.\n                        return $resource('/api/filter/cliente', filters).get();\n                    },\n                    remove: function (id) {\n                        return $resource('/api/cliente/:id', { id: id }).remove();\n                    },\n                    edit: function (cliente) {\n                        return $resource('/api/cliente/:id/edit', {id: cliente.id}, {\n                            update: {\n                                method: 'GET',\n                                params: {cliente: cliente}\n                            }\n                        }).update();\n                    },\n                    update: function (cliente) {\n                        return $resource('/api/cliente/:id', {id: cliente.id}, {\n                            update: {\n                                method: 'PUT',\n                                params: {clienteagente: cliente}\n                            }\n                        }).update();\n                    },\n                    create:function (cliente) {\n                        return $resource('/api/cliente', null, {\n                            update: {\n                                method: 'POST',\n                                params: {clienteagente: cliente}\n                            }\n                        }).update();\n                    },\n                    getSelects:function () {\n                        return $resource('/api/get_cliente_select', null, {\n                            update: {\n                                method: 'POST',\n//                                isArray: true\n                            }\n                        }).update();\n                    }\n                };\n            }]);\n","angular.module('biosegura')\n        .factory('Contactos', ['$resource', function ($resource) {\n                return {\n                    getAll: function (data) {\n                        return $resource('/api/contacto/:data', data).query();\n                    },\n                    getFiltered: function (filters) {\n                        //@holadoc Angular/ngResource  $resource(\"../rest/api\"}).get(); return an object.  $resource(\"../rest/api\").query(); return an array.\n                        return $resource('/api/filter/contacto', filters).get();\n                    },\n                    remove: function (id) {\n                        return $resource('/api/contacto/:id', { id: id }).remove();\n                    },\n                    edit: function (contacto) {\n                        return $resource('/api/contacto/:id/edit', {id: contacto.id}, {\n                            update: {\n                                method: 'GET',\n                                params: {contacto: contacto}\n                            }\n                        }).update();\n                    },\n                    update: function (contacto) {\n                        return $resource('/api/contacto/:id', {id: contacto.id}, {\n                            update: {\n                                method: 'PUT',\n                                params: {contactoagente: contacto}\n                            }\n                        }).update();\n                    },\n                    create:function (contacto) {\n                        return $resource('/api/contacto', null, {\n                            update: {\n                                method: 'POST',\n                                params: {contactoagente: contacto}\n                            }\n                        }).update();\n                    },\n                    getSelects:function () {\n                        return $resource('/api/get_contacto_select', null, {\n                            update: {\n                                method: 'POST',\n//                                isArray: true\n                            }\n                        }).update();\n                    }\n                };\n            }]);\n","\n\nangular.module('biosegura')\n    .service('propiedadesCompartidas', function () {\n        var idImportacion = '';\n\n        return {\n            getIdImportacion: function () {\n                return idImportacion;\n            },\n            setIdImportacion: function(value) {\n                idImportacion = value;\n            }\n        };\n    });\n","angular.module('biosegura')\n        .factory('User', ['$http', '$location', '$cookies', function ($http, $location, $cookies) {\n                return {\n                    doLogin: function (data) {\n                        return $http({\n                            headers: {'Content-Type': 'application/json'},\n                            url: baseUrl + 'api/auth',\n                            method: \"POST\",\n                            data: {email: data.email, password: data.password}\n                        }).success(function (response) {\n                            $cookies.put('auth', JSON.stringify(response));\n                        });\n                    },\n\n                    doUserLogout: function () {\n                        $http({\n                            headers: {'Content-Type': 'application/json'},\n                            url: baseUrl + 'api/logout',\n                            method: \"POST\"\n                        }).success(function () {\n                            $cookies.remove('auth');\n                            $location.path('/');\n                        });\n                    },\n                    \n                    getAuthStatus: function () {\n                        return $cookies.get('auth');\n                    },\n                    \n                    getUserObject: function () {\n                        return angular.fromJson($cookies.get('auth'));\n                    },\n                    \n                    isAdmin: function () {\n                        return this.getAuthStatus() && this.getUserObject().role === 'Administrador';\n                    },\n                    \n                    isCoord: function () {\n                        return this.getAuthStatus() && this.getUserObject().role === 'Coordinador';\n                    },\n                    \n                    isConta: function () {\n                        return this.getAuthStatus() && this.getUserObject().role === 'Contable';\n                    }\n                };\n            }]);\n","angular.module('biosegura')\n        .factory('Usuarios', ['$resource', function ($resource) {\n                return {\n                    getAll: function (data) {\n                        return $resource('/api/user/:data', data).query();\n                    },\n                    getFiltered: function (filters) {\n                        return $resource('/api/user_filter', filters).get();\n                    },\n                    remove: function (id) {\n                        return $resource('/api/user/:id', { id: id }).remove();\n                    },\n                    edit: function (user) {\n                        return $resource('/api/user/:id/edit', {id: user.id}, {\n                            update: {\n                                method: 'GET',\n                                params: {user: user}\n                            }\n                        }).update();\n                    },\n                    update: function (user) {\n                        return $resource('/api/user/:id', {id: user.id}, {\n                            update: {\n                                method: 'PUT',\n                                params: {user: user}\n                            }\n                        }).update();\n                    },\n                    create:function (user) {\n                        return $resource('/api/user', null, {\n                            update: {\n                                method: 'POST',\n                                params: {user: user}\n                            }\n                        }).update();\n                    }\n                };\n            }]);\n \n"],"sourceRoot":"/source/"}